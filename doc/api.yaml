openapi: 3.0.3
info:
  title: WasaText
  description: |
    Connect with your friends effortlessly using WASAText! Send and receive messages, whether one-on-one
    or in groups, all from the convenience of your PC. Enjoy seamless conversations with text or GIFs and
    easily stay in touch through your private chats or group discussion.
  version: "0.1"
servers:
  - url: http://localhost:3000

tags:
  - name: "Login"
    description: endpoints for loggin in action
  - name: "User"
    description: endpoints for users related operations
  - name: "Chats"
    description: endpoints for private chats
  - name: "Messages"
    description: endpoints for messages
  - name: "Groups"
    description: endpoints for groups related operations
  - name: "Comment"
    description: endpoints for reactions related operations
  - name: "Images"
    description: endpoints for binary images

paths:
  /session:
    post:
      tags:
        - Login
      summary: Logs in or creates the user account
      security: []
      description: |
        Logs the user in by username. If the user does not exist, the account will be created, 
        and a unique identifier will be returned. If the user already exists, only the identifier 
        is returned, without creating a new account.
      operationId: doLogin
      requestBody:
        description: User's name is required for login or account creation.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "The username used for login or registration."
              properties:
                username:
                  $ref: "#/components/schemas/Name"
              required:
                - username

      responses:
        "201":
          description: "User logged in successfully."
          content:
            application/json:
              schema:
                description: "Returns the user's unique identifier."
                type: object
                properties:
                  identifier:
                    $ref: "#/components/schemas/Identifier"
                required:
                  - identifier
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /users/{userId}/username:
    put:
      tags:
        - User
      summary: change username
      description: |
        change your Username to a new, unused one
      operationId: setMyUserName
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        description: "send the request with the new username"
        required: true
        content:
          application/json:
            schema:
              description: "object with new username as a string"
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Name"
              required:
                - username
      responses:
        "202":
          description: "username changed successfully"
          content:
            application/json:
              schema:
                description: new Username
                type: object
                properties:
                  username:
                    $ref: '#/components/schemas/Name'
                required:
                  - username
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          description: "Conflict: The new username is already taken."
          content:
            text/plain:
              schema:
                description: username already taken
                type: string
                example: "username already taken"

        "500":
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/photoProfile:
    put:
      tags:
        - User
      summary: change photo profile
      description: send the request with the new photo profile
      operationId: setMyPhoto
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        description: a photo to be set
        required: true
        content:
          image/png:
            schema:
              $ref: "#/components/schemas/Image"
      responses:
        "201":
          description: Profile photo updated successfully.
          content:
            application/json:
              schema:
                description: Unique image code
                type: object
                properties:
                  imageCode:
                    type: string
                    minLength: 27
                    maxLength: 27
                    pattern: "^[0-9a-zA-Z]*?"
                    example: "1ThDPX91uDwB1yxw5jYRxUIVs1W"
                required:
                  - imageCode
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/conversations:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags:
        - Chats
      summary: Conversations list
      description: Get the list of conversations of a specific user
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations retured successfully
          content:
            application/json:
              schema:
                description: array of conversation of a user and total of conversation
                type: object
                properties:
                  conversations:
                    description: array of conversation with all associated informations
                    type: array
                    items:
                      $ref: "#/components/schemas/ConversationInfo"
                    minItems: 0
                    maxItems: 250
                required:
                  - conversations
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Chats
      summary: start a new conversation
      description: |
        used to create a new group or add new user in your conversation list
      operationId: startConversation
      requestBody:
        description: |
          we need to know if you are creating a group or adding a new user to your conversation list.
          if you are creating a group then we will need the name but if you are adding a person then we will need then person's name.
        required: true
        content:
          application/json:
            schema:
              description: need a name and a type of conversation
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
                typeConversation:
                  type: string
                  enum: [private,group]
              required:
                - name
                - typeConversation
      responses:
        "201":
          description: "conversation created successfully"
          content:
            application/json:
              schema:
                description: "response have 3 field message from server, name and type convesation"
                type: object
                properties:
                  identifier:
                    $ref: "#/components/schemas/Identifier"
                required:
                  - identifier
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /images/{photoId}/photo:
    get:
      tags:
        - Images
      summary: get photos
      description: get photos using photoId in binary format
      operationId: getPhotos
      parameters:
        - $ref: "#/components/parameters/photoId"
      responses:
        "200":
          description: photo returned successfully
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/Image"
            image/jpeg:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/messages:
    parameters:
      - $ref: "#/components/parameters/conversationId"
    get:
      parameters:
        - name: limit
          in: query
          required: true
          description: Maximum number of a messages to return
          schema:
            type: integer
            example: 20
        - name: cursor
          in: query
          required: false
          description: |
            Token to retrieve the next set of messages starting after this cursor.
            not required because you can get your first set of data (messages).
          schema:
            $ref: "#/components/schemas/Identifier"
      tags:
        - Messages
      summary: list messages of a conversation
      description: |
        open a conversation to view all exchanged messages, displayed in reverse chronologial order.
        Each message include the timestamp, the content and the sender's username. and one/two checkmarks to indicate the status of sent messages.
      operationId: getConversation
      responses:
        "200":
          description: List of messages returned successfully
          content:
            application/json:
              schema:
                description: object with message details
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/MessageDetail"
                    minItems: 0
                    maxItems: 250
                  totalCount:
                    type: integer
                    description: Total number of messages
                  nextCursor:
                    $ref: "#/components/schemas/Identifier"
                required:
                  - messages
                  - totalCount
                  - nextCursor
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/text:
    post:
      tags:
        - Messages
      summary: send a text message
      description: send a text message as a string to a spcific conversation using conversationId
      operationId: sendMessage
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        description: needed a text to be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTextMessage"
      responses:
        "202":
          description: message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDetail"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /conversations/{conversationId}/image:
    post:
      tags:
        - Messages
      summary: send an image
      description: send an image message, png or jpeg
      operationId: sendImage
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        description: image file needed
        required: true
        content:
          image/png:
            schema:
              $ref: "#/components/schemas/Image"
          image/jpeg:
            schema:
              $ref: "#/components/schemas/Image"
      responses:
        "202":
          description: image sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDetail"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}/forward:
    post:
      tags:
        - Messages
      summary: forward a message
      description: forward a message (messageId) to an another conversation (conversationId) of your conversations list,
      operationId: forwardMessage
      parameters:
        - $ref: "#/components/parameters/messageId"
      requestBody:
        description: must specify the conversation to forward the message
        required: true
        content:
          application/json:
            schema:
              description: need conversation ID
              type: object
              properties:
                conversationId:
                  $ref: "#/components/schemas/Identifier"
              required:
                - conversationId
      responses:
        "202":
          description: message forwarded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDetail"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}:
    delete:
      tags:
        - Messages
      summary: delete a message using messageId
      description: delete a message you sent in the past
      operationId: deleteMessage
      parameters:
        - $ref: "#/components/parameters/messageId"
      responses:
        "204":
          description: message deleted successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/member:
    put:
      tags:
        - Groups
      summary: add an user in a group
      description: add a user in a group, you must be in the group already
      operationId: addToGroup
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: needed a userId to add a person in a group
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/Identifier"
              required:
                - userId
      responses:
        "201":
          description: users added
          content:
            application/json:
              schema:
                properties:
                  userId:
                    $ref: "#/components/schemas/Identifier"
                required:
                  - userId
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}:
    delete:
      tags:
        - Groups
      summary: leave a group
      description: leave a group using conversationId
      operationId: leaveGroup
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        "204":
          description: group successfully abandoned
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/groupName:
    put:
      tags:
        - Groups
      summary: change group name
      description: set a new name for a group, must be a member group
      operationId: setGroupName
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: a new group name
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
              required:
                - name
      responses:
        "200":
          description: group name changed successfully
          content:
            application/json:
              schema:
                properties:
                  groupName:
                    $ref: "#/components/schemas/Name"
                required:
                  - groupName
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/groupPhoto:
    put:
      tags:
        - Groups
      summary: change group photo
      description: set a new image as photo profile for a group, you must be in the group
      operationId: setGroupPhoto
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          image/png:
            schema:
              $ref: "#/components/schemas/Image"
          image/jpeg:
            schema:
              $ref: "#/components/schemas/Image"
      responses:
        "201":
          description: Profile photo updated successfully.
          content:
            application/json:
              schema:
                description: Unique image code
                type: object
                properties:
                  imageCode:
                    type: string
                    minLength: 27
                    maxLength: 27
                    pattern: "^[0-9a-zA-Z]*?"
                    example: "1ThDPX91uDwB1yxw5jYRxUIVs1W"
                required:
                  - imageCode
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}/comment:
    put:
      tags:
        - Comment
      summary: add a reaction to a message
      description: add a reaction to a message of a coversation, you can choose between 5 emoji
      operationId: commentMessage
      parameters:
        - $ref: "#/components/parameters/messageId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: choose an emoji
              type: object
              properties:
                reaction:
                  description: there are 5 different pre-selected emoji
                  type: string
                  enum: ["😊","😂","😍","😎","🥺"]
                  example: "😎"
              required:
                - reaction
      responses:
        "200":
          description: message commented successfully
          content:
            application/json:
              schema:
                properties:
                  messageId:
                    $ref: "#/components/schemas/Identifier"
                required:
                  - messageId
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Comment
      summary: remove your reaction to a message
      description: remove a reaction to a message of a coversation
      operationId: uncommentMessage
      parameters:
        - $ref: "#/components/parameters/messageId"
      responses:
        "204":
          description: reaction removed successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/read:
    put:
      tags:
        - Messages
      summary: notify that the message has been read
      description: send a put request to notify the message with messageId has been read by user
      operationId: readMessage
      parameters:
        - $ref: "#/components/parameters/messageId"
      responses:
        "200":
          description: message status has been stored, return the message identifier
          content:
            application/json:
              schema:
                properties:
                  messageId:
                    $ref: "#/components/schemas/Identifier"
                required:
                  - messageId
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    photoId:
      description: identifier for a single photo as a integer
      schema:
        $ref: "#/components/schemas/photoId"
      name: photoId
      in: path
      required: true
    conversationId:
      description: identifier for a single conversation
      name: conversationId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
    messageId:
      description: identifier for a single message
      name: messageId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
    userId:
      description: identifier for a single user
      name: userId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Identifier"
  schemas:
    Name:
      title: UserName/GroupName
      description: schema used to rappresent username or group name
      type: string
      pattern: "^[a-zA-Z0-9]*$"
      minLength: 3
      maxLength: 25
      example: "Deadpool69"
    Identifier:
      title: ID
      description: "A unique identifier for the user, in the specified format."
      type: string
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      minLength: 15
      maxLength: 15
      example: "123e4567-e89b-12d3-a456-426614174000"
    Image:
      title: Image
      description: Image binary format as a string
      type: string
      format: binary
      minLength: 1
      maxLength: 20971520 # 20MB
    photoId:
      title: photo Identifier
      description: photo id as integer, is unique
      type: integer
    ConversationInfo:
      description: |
        list of conversation with other users or with groups, sorted in reverse chronological order.
        Each element in the list must display the username of the other person or the group name, the user profile photo or the group photo, the date and time of the latest message, the preview (snippet) of the text message, or an icon for a photo message.
      type: object
      properties:
        conversationId:
          $ref: "#/components/schemas/Identifier"
        conversationType:
          description: type of conversation
          type: string
          enum: [private,group]
        conversationName:
          $ref: "#/components/schemas/Name"
        photoProfileCode:
          description: "photo code (unique)"
          type: string
          minLength: 27
          maxLength: 27
          pattern: "^[0-9a-zA-Z]*?"
          example: "1ThDPX91uDwB1yxw5jYRxUIVs1W"
        lastMessageTimeStamp:
          description: timestamp of the last message of conversation
          type: string
          format: date-time
          example: "2024-12-23T09:00:00Z"
          pattern: '^\d{4}-\d{2}-\d{2}T-\d{2}:\d{2}:\d{2}Z$'
          minLength: 20
          maxLength: 20
        lastMessagePreview:
          description: snippet of the last message in coversation
          type: string
          maxLength: 50
          example: "hey buddy, How ..."
      required:
        - conversationId
        - conversationType
        - conversationName
        - photoProfileId
        - lastMessageTimeStamp
        - lastMessagePreview
    Text:
      description: body of the message
      type: string
      minLength: 1
      maxLength: 5000
      pattern: "^.*?$"
      example: "heyb buddy!"
    MessageDetail:
      description: message information
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/Identifier"
        senderId:
          $ref: "#/components/schemas/Identifier"
        username:
          description: sender of the message
          type: string
          example: "Deadpool"
          pattern: "^[a-zA-Z0-9]*$"
        text:
          $ref: "#/components/schemas/Text"
        image:
          description: "photo code (unique)"
          type: string
          minLength: 27
          maxLength: 27
          pattern: "^[0-9a-zA-Z]*?"
          example: "1ThDPX91uDwB1yxw5jYRxUIVs1W"
        replyTo:
          $ref: "#/components/schemas/Identifier"
        timestamp:
          description: data and time of message
          type: string
          format: date-time
          minLength: 20
          maxLength: 20
        status:
          description: status od the message
          type: string
          enum: [read,received]
        typeContent:
          description: content type, it can be a phot or a text
          type: string
          enum: [text,photo]
        reactions:
          description: array of reactions (emoji)
          type: array
          items:
            type: object
            description: object with the emoji idetifier and the sender id
            properties:
              emoji:
                description: user can react with one of this emoji
                type: string
                example: "😂"
                enum:
                  - "😊"
                  - "😂"
                  - "😍"
                  - "😎"
                  - "🥺"
              userId:
                $ref: "#/components/schemas/Identifier"
          minItems: 0
          maxItems: 250
      required:
        - messageId
        - senderId
        - username
        - text
        - date
        - status
        - typeContent
        - reactions

    NewTextMessage:
      description: field of a text message
      type: object
      properties:
        senderId:
          $ref: "#/components/schemas/Identifier"
        bodyMessage:
          $ref: "#/components/schemas/Text"
        replyTo:
          $ref: "#/components/schemas/Identifier"
      required:
        - senderId
        - bodyMessage
        - replyTo


  responses:
    #400 class responses
    #400
    BadRequest:
      description: syntax of the request was not compliant with docs, check parameters
      content:
        text/plain:
          schema:
            description: bad request string message
            type: string
            example: Bad Request
    #401
    Unauthorized:
      description: authorization missing or not valid
      content:
        text/plain:
          schema:
            description: Unauthorized string message
            type: string
            example: Unauthorized
    #403
    Forbidden:
      description: server will not accept request due to lacking of client permissions
      content:
        text/plain:
          schema:
            description: Forbidden string message
            type: string
            example: Forbidden
    #404
    NotFound:
      description: resource not found
      content:
        text/plain:
          schema:
            description: Not Found string message
            type: string
            example: Not found
    #409
    Conflict:
      description: resource cause a conflict
      content:
        text/plain:
          schema:
            description: conflict string message
            type: string
            example: Conflict
    #500 class responses
    #500
    InternalServerError:
      description: the server encountered an error while processing the request
      content:
        text/plain:
          schema:
            description: Internal Server Error string message
            type: string
            example: Internal Server Error

  securitySchemes:
    TokenAuth:
      description: |
        User authentication with the token generated by backend application
      type: http
      scheme: bearer

# Apply security scheme globally, disabling it explicitly when unnecessary with security: [].
security:
  - TokenAuth: []